//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DemoApplication.Models
{
    using DemoApplication.Utility;
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;

    public partial class Customer
    {
        public int Id { get; set; }

        [Required(ErrorMessage = "Invalid: {0} is required.")]
        [MaxLength(20, ErrorMessage = "Invalid: {0} must be no longer than {1} characters.")]
        [RegularExpression("^[A-Za-z]+$", ErrorMessage = "Invalid: {0} must only contain alphabetic characters.")]
        [Display(Name = "First Name")]
        public string FirstName { get; set; }

        [Required(ErrorMessage = "Invalid: {0} is required.")]
        [MaxLength(20, ErrorMessage = "Invalid: {0} must be no longer than {1} characters.")]
        [RegularExpression("^[A-Za-z]+$",ErrorMessage = "Invalid: {0} must only contain alphabetic characters.")]
        [Display(Name = "Last Name")]
        public string LastName { get; set; }

        [Required(ErrorMessage = "Invalid: {0} is required.")]
        public string Gender { get; set; }

        [Required(ErrorMessage = "Invalid: {0} is required.")]
        //[DateValidation(ErrorMessage = "Invalid: {0} invalid format.")]
        // Cannot validate the date format with either Regex or custom ValidationAttribute
        // Tested with console app and the custom class works fine
        public DateTime DOB { get; set; }

        [Required(ErrorMessage = "Invalid: {0} is required.")]
        [MaxLength(50, ErrorMessage = "Invalid: {0} must be no longer than {1} characters.")]
        [RegularExpression("^[a-zA-Z0-9 -]*$", ErrorMessage = "Invalid: {0} must only contain words and numbers.")]
        public string Address { get; set; }

        [Required(ErrorMessage = "Invalid: {0} is required.")]
        [Range(0, 9999999999, ErrorMessage = "Invalid: {0} must be no longer than 10 digits.")]
        [RegularExpression("^[0-9.]+$", ErrorMessage = "Invalid: {0} must be a number.")]
        public decimal Money { get; set; }
    }
}
